{"version":3,"file":"array.util.js","sourceRoot":"","sources":["../../../../build/src/app/utilities/array.util.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C,IAAa,SAAS;IAAtB;IA6BA,CAAC;IA5BC,+BAAW,GAAX,UAAY,KAAY,EAAE,kBAA0B,EAAE,OAAY;QAAlE,iBAaC;QAZC,IAAI,IAAI,GAAU,EAAE,CAAC;QACrB,IAAM,QAAQ,GAAG;YACf,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,CAAC,UAAC,IAAS,IAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/D,aAAa,EAAE,OAAO,CAAC,aAAa,IAAI,CAAC;YACzC,gBAAgB,EAAE,OAAO,CAAC,gBAAgB,IAAI,CAAC;gBAC7C,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;YAClC,CAAC,CAAC;SACH,CAAC;QACF,KAAK,CAAC,OAAO,CAAC,UAAC,IAAS;YACtB,KAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,kBAAkB,EAAE,QAAQ,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,mCAAe,GAAvB,UAAwB,IAAS,EAAE,IAAW,EAAE,kBAA0B,EAAE,QAAa;QAAzF,iBAYC;QAXC,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,MAAI,GAAU,EAAE,CAAC;YACrB,IAAI,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,UAAC,IAAS;gBACzC,MAAI,CAAC,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,kBAAkB,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,kBAAkB,CAAC,GAAG,MAAI,CAAC;QAClC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACH,gBAAC;AAAD,CAAC,AA7BD,IA6BC;AA7BY,SAAS;IADrB,UAAU,EAAE;GACA,SAAS,CA6BrB;SA7BY,SAAS","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ArrayUtil {\n  flattenTree(items: any[], flattenPropertyKey: string, options: any): any[] {\n    let list: any[] = [];\n    const settings = {\n      initNode: options.initNode || ((node: any) => { return node; }),\n      uniqueIdStart: options.uniqueIdStart || 1,\n      generateUniqueId: options.generateUniqueId || (() => {\n        return settings.uniqueIdStart++;\n      })\n    };\n    items.forEach((item: any) => {\n      this.flattenTreeNode(item, list, flattenPropertyKey, settings);\n    });\n    return list;\n  }\n\n  private flattenTreeNode(node: any, list: any[], flattenPropertyKey: string, settings: any) {\n    node = settings.initNode(node);\n    node.id = settings.generateUniqueId();\n    list.push(node);\n    if (node[flattenPropertyKey]) {\n      let refs: any[] = [];\n      node[flattenPropertyKey].forEach((item: any) => {\n        refs.push(this.flattenTreeNode(item, list, flattenPropertyKey, settings));\n      });\n      node[flattenPropertyKey] = refs;\n    }\n    return node;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}