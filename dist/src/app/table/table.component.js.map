{"version":3,"file":"table.component.js","sourceRoot":"","sources":["../../../../build/src/app/table/table.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  DoCheck,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { GridOptions } from 'ag-grid/main';\n\nimport { ArrayUtil } from '../utilities/array.util';\nimport { TableConfig } from './table-config';\n\nimport { cloneDeep, defaults, isEqual } from 'lodash';\n// const flattenTree = require('flatten-tree');\n\n/**\n * Table component.\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-table',\n  template: `<ag-grid-angular class=\"ag-fresh\" style=\"width: 600px; height: 215px\" [rowData]=\"flatRowData\" [columnDefs]=\"columnDefs\" [gridOptions]=\"gridOptions\" (gridReady)=\"gridReady($event)\"></ag-grid-angular>`\n})\nexport class TableComponent implements DoCheck, OnInit {\n  /**\n   * An array of items to display for table columns\n   */\n  @Input() columnDefs: any[];\n\n  /**\n   * The action config containing component properties\n   */\n  @Input() config: TableConfig;\n\n  /**\n   * An object containing table properties\n   */\n  @Input() gridOptions?: GridOptions;\n\n  /**\n   * An array of items to display for table rows\n   */\n  @Input() rowData: any[];\n\n  /**\n   * Items template\n   */\n  // @Input() template: TemplateRef<any>;\n\n  /**\n   * The event emitted when an action has been selected\n   */\n  @Output('onGridReady') onGridReady = new EventEmitter();\n\n  private defaultConfig = {\n  } as TableConfig;\n  private _flatRowData: any[];\n  private flattenOptions = {\n    initNode: (node: any) => node // cloneDeep(node) avoid mutating the tree\n  };\n  private flattenPropertyKey: string = 'children';\n  private prevConfig: TableConfig;\n\n  /**\n   * The default constructor\n   *\n   * @param el The element reference for this component\n   */\n  constructor(private arrayUtil: ArrayUtil) {\n  }\n\n  // Initialization\n\n  /**\n   *  Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  /**\n   *  Check if the component config has changed\n   */\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  /**\n   * Set up default config\n   */\n  protected setupConfig(): void {\n    if (this.config !== undefined) {\n      defaults(this.config, this.defaultConfig);\n    } else {\n      this.config = cloneDeep(this.defaultConfig);\n    }\n    this.prevConfig = cloneDeep(this.config);\n\n    // Set filter to show visible rows\n    if (this.gridOptions === undefined) {\n      this.gridOptions = <GridOptions>{};\n    }\n    this.gridOptions.isExternalFilterPresent = () => { return true; };\n    this.gridOptions.doesExternalFilterPass = (node) => {\n      // return this.gridOptions.api.getValue('isVisible', node);\n      return node.data.isVisible;\n    };\n\n    // Flatten tree\n    if (this.rowData !== undefined) {\n      this.rowData.forEach((node) => {\n        node.isVisible = true;\n      });\n      this._flatRowData = this.arrayUtil.flattenTree(this.rowData, this.flattenPropertyKey, this.flattenOptions);\n    }\n  }\n\n  // Accessors\n\n  /**\n   * Returns a flattened list of items and children\n   *\n   * @returns {any[]}\n   */\n  get flatRowData(): any[] {\n    return this._flatRowData;\n  }\n\n  // Actions\n\n  gridReady($event: any): void {\n    this.onGridReady.emit($event);\n  }\n\n  // Private\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}